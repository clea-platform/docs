"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[558],{6393:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"clea-101/glossary","title":"Glossary","description":"User","source":"@site/docs/1_clea-101/2-glossary.md","sourceDirName":"1_clea-101","slug":"/clea-101/glossary","permalink":"/clea-101/glossary","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3}}');var i=a(4848),t=a(8453);const r={sidebar_position:3},l="Glossary",o={},c=[{value:"User",id:"user",level:2},{value:"Organization",id:"organization",level:2},{value:"Clients",id:"clients",level:2},{value:"Appliance",id:"appliance",level:2},{value:"Apps",id:"apps",level:2},{value:"Roles",id:"roles",level:2},{value:"Permissions",id:"permissions",level:2},{value:"Tenant",id:"tenant",level:2},{value:"Realm",id:"realm",level:2},{value:"Cluster",id:"cluster",level:2},{value:"Sys Admin",id:"sys-admin",level:2},{value:"Tenant Admin Console",id:"tenant-admin-console",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"glossary",children:"Glossary"})}),"\n",(0,i.jsx)(n.h2,{id:"user",children:"User"}),"\n",(0,i.jsx)(n.p,{children:"A user is any person able to log into the system and use it."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organization User:"})," a user who is part of an organization created/managed by the organization admin users."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organization Admin User:"})," an organization user who possesses an admin role."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client User/End User:"})," a user that registers itself in the portal (which is not part of any existing organization). When they register, a linked thin organization is created."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"organization",children:"Organization"}),"\n",(0,i.jsx)(n.p,{children:"An organization is a set of appliances, users, and roles. There are two types of organizations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Standard Organization:"})," that has complete management of all platform aspects."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thin Organization:"})," an organization with simplified features and just a single user automatically created when an end-user register into the portal. If needed, the thin organization can upgrade to a standard organization from the single user to fully manage appliances, clients, and users."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"clients",children:"Clients"}),"\n",(0,i.jsx)(n.p,{children:"A client is anyone buying appliances from an organization. A client is also an organization, and a vendor organization can assign appliances to a client organization."}),"\n",(0,i.jsx)(n.h2,{id:"appliance",children:"Appliance"}),"\n",(0,i.jsx)(n.p,{children:"An Appliance is a final product. It is a machine identified by a serial number with an internal gateway (Device) connected to the Astarte/Clea.\nAn Appliance can be assigned to a customer by the provider organization."}),"\n",(0,i.jsx)(n.h2,{id:"apps",children:"Apps"}),"\n",(0,i.jsx)(n.p,{children:"Clea Portal Apps are external web apps developed by developers who want to customize their Clea experience."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Appliance Apps:"})," Apps contained in a single appliance page. Default apps will be available at first and developed by the Clea team. Check the ",(0,i.jsx)(n.a,{href:"/get_started/create_a_clea_portal_app",children:"create a third-party Clea Portal App"})," section to learn how to develop a new one."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organization-Wide Applications:"})," Clea platform will allow customization through organization-wide applications that can access many devices part of the same organization."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"roles",children:"Roles"}),"\n",(0,i.jsx)(n.p,{children:"A Role is a selection of permissions assigned to a User."}),"\n",(0,i.jsx)(n.h2,{id:"permissions",children:"Permissions"}),"\n",(0,i.jsx)(n.p,{children:"Permissions are granular authorizations given to a User."}),"\n",(0,i.jsx)(n.h2,{id:"tenant",children:"Tenant"}),"\n",(0,i.jsx)(n.p,{children:"A tenant is a logical Clea instance that doesn't share any logical entity with other tenants. Each tenant has organizations, users, appliances, and preferences, and a user has no rights to other tenants. All tenants can be managed from a tenant admin console."}),"\n",(0,i.jsx)(n.h2,{id:"realm",children:"Realm"}),"\n",(0,i.jsx)(n.p,{children:"A set of Astarte resources (e.g., devices, interfaces, triggers) is tied 1:1 to a Tenant (and to a ScyllaDB/Cassandra database)."}),"\n",(0,i.jsx)(n.h2,{id:"cluster",children:"Cluster"}),"\n",(0,i.jsx)(n.p,{children:"A cluster is an instance running on a specific data center on a set of computing resources."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Astarte Cluster:"})," an instance running on a certain data center on a set of computing resources."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sys-admin",children:"Sys Admin"}),"\n",(0,i.jsx)(n.p,{children:"A user that is a tenant admin console user can administer one or more tenants. Sys Admin cannot log into a tenant organization."}),"\n",(0,i.jsx)(n.h2,{id:"tenant-admin-console",children:"Tenant Admin Console"}),"\n",(0,i.jsx)(n.p,{children:"A portal that allows performing administrative tasks on tenants."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var s=a(6540);const i={},t=s.createContext(i);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);